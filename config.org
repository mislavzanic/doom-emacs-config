#+TITLE: Doom Emacs config
#+PROPERTY: header-args:emacs-lisp

* Emacs server
#+begin_src emacs-lisp :tangle ./config.el
(server-start)
#+end_src

* Ident
#+begin_src emacs-lisp :tangle ./config.el
(setq user-full-name "Mislav Zanic"
      user-mail-address "mislavzanic3@gmail.com")
#+end_src

* Bookmarks and buffers

Doom Emacs uses ‘SPC b’ for keybindings related to bookmarks and buffers.  Bookmarks are somewhat like registers in that they record positions you can jump to.  Unlike registers, they have long names, and they persist automatically from one Emacs session to the next. The prototypical use of bookmarks is to record where you were reading in various files.  Regarding buffers, the text you are editing in Emacs resides in an object called a buffer. Each time you visit a file, a buffer is used to hold the file’s text. Each time you invoke Dired, a buffer is used to hold the directory listing.

#+begin_src emacs-lisp :tangle ./config.el
(map! :leader
      (:prefix ("b". "buffer")
       :desc "List bookmarks" "L" #'list-bookmarks
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save))
#+end_src

* Cosmetic

#+begin_src emacs-lisp :tangle ./config.el
(setq fancy-splash-image "~/.config/.dotfiles/config/emacs/doom/logo.png")
(setq +doom-dashboard-banner-file (expand-file-name "logo.png" doom-private-dir)
      +doom-dashboard-banner-dir  "~/.config/doom-emacs/modules/ui/doom-dashboard/")


(set-frame-parameter (selected-frame) 'alpha '(85 . 85))
(add-to-list 'default-frame-alist '(alpha . (85 . 85)))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

(setq modus-themes-vivendi-color-overrides
      '((bg-alt . "#000000")))
(setq doom-theme 'modus-vivendi)
#+end_src

** Dashboard
#+begin_src emacs-lisp :tangle ./config.el
(use-package! dashboard
  :config
  (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
          dashboard-startup-banner "~/.config/.dotfiles/config/emacs/doom/logo.png"
          dashboard-center-content t))

#+end_src

** Doom modeline
#+begin_src emacs-lisp :tangle ./config.el
(after! doom-modeline
    (setq doom-modeline-major-mode-icon t
          doom-modeline-buffer-state-icon t
          doom-modeline-buffer-encoding nil
          doom-modeline-bar-width 6
          doom-modeline-lsp t
          doom-modeline-github nil)
    (custom-set-faces '(mode-line ((t (:height 1.0))))
                      '(mode-line-inactive ((t (:height 1.0)))))
    (remove-hook 'doom-modeline-mode-hook #'size-indication-mode))
#+end_src

** Line numbers
#+begin_src emacs-lisp :tangle ./config.el
(setq display-line-numbers-type 'relative
      tab-always-indent 'complete)
#+end_src

* Dired

Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  Doom Emacs does not use ‘SPC d’ for any of its keybindings, so I’ve chosen the format of ‘SPC d’ plus ‘key’.

** Keybindings To Open Dired

| COMMAND    | DESCRIPTION                       | KEYBINDINGS |
|------------+-----------------------------------+-------------|
| dired      | /Open file in dired/              | SPC d d     |
| dired-jump | /Jump to curr directory in dired/ | SPC d j     |

** Keybindings in dired

| COMMAND             | DESCRIPTION                                   | KEYBINDING |
|---------------------+-----------------------------------------------+------------|
| dired-view-file     | /View file in dired/                          | SPC d v    |
| dired-up-directory  | /Go up in directory tree/                     | h          |
| dired-find-file     | /Go down in directory tree (or open if file)/ | l          |
| dired-next-line     | Move down to next line                        | j          |
| dired-previous-line | Move up to previous line                      | k          |
| dired-mark          | Mark file at point                            | m          |
| dired-unmark        | Unmark file at point                          | u          |

#+begin_src emacs-lisp :tangle ./config.el
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file" "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-find-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-chmod
  (kbd "O") 'dired-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-up-directory
  (kbd "% l") 'dired-downcase
  (kbd "% u") 'dired-upcase
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)

;; If peep-dired is enabled, you will get image previews as you go up/down with 'j' and 'k'
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)

(use-package! all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package! dired-open
  :config
  (setq dired-open-extensions '(("png" . "feh")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv")
                                ("pdf" . "zathura"))))
#+end_src

* Evil
#+begin_src emacs-lisp :tangle ./config.el
(map! :map evil-window-map
      "SPC" #'rotate-layout)
#+end_src

* Eshell
#+begin_src emacs-lisp :tangle ./config.el
(defun efs/configure-shell ()
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredumps t
        eshell-scroll-to-bottom-on-input t))
(use-package! eshell
  :hook (eshell-first-time-mode . efs/configure-shell)
  :config
  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim"))))
#+end_src


* EXWM
#+begin_src emacs-lisp :tangle ./config.el
(when IS-LINUX
    (load! "~/.config/.dotfiles/config/emacs/exwm/+exwm"))
#+end_src


* Font Config

- Settings related to fonts within Doom Emacs:
  - ‘doom-font’ – standard monospace font that is used for most things in Emacs.
  - ‘doom-variable-pitch-font’ – variable font which is useful in some Emacs plugins.
  - ‘doom-big-font’ – used in doom-big-font-mode; useful for presentations.
  - ‘font-lock-comment-face’ – for comments.
  - ‘font-lock-keyword-face’ – for keywords with special significance like ‘setq’ in elisp.
  - ‘global-prettify-symbols-mode’ – change certain keywords to symbols, such as lambda!

#+begin_src emacs-lisp :tangle ./config.el

(setq doom-font (font-spec :family "JetBrains Mono Nerd Font" :size 12)
      doom-variable-pitch-font (font-spec :family "JetBrains Mono Nerd Font" :size 12)
      doom-big-font (font-spec :family "JetBrains Mono Nerd Font" :size 26))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

* Ivy
** Ivy Postframe
#+begin_src emacs-lisp :tangle ./config.el
(setq ivy-posframe-display-functions-alist
      '((swiper                     . ivy-posframe-display-at-point)
        (complete-symbol            . ivy-posframe-display-at-point)
        (counsel-M-x                . ivy-display-function-fallback)
        (counsel-esh-history        . ivy-posframe-display-at-window-center)
        (counsel-describe-function  . ivy-display-function-fallback)
        (counsel-describe-variable  . ivy-display-function-fallback)
        (counsel-find-file          . ivy-display-function-fallback)
        (counsel-recentf            . ivy-display-function-fallback)
        (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
        (dmenu                      . ivy-posframe-display-at-frame-top-center)
        (nil                        . ivy-posframe-display))
      ivy-posframe-height-alist
      '((swiper . 20)
        (dmenu . 20)
        (t . 10)))
;; (ivy-posframe-mode 1) ; 1 enables posframe-mode, 0 disables it.
#+end_src

** Ivy keybindings
#+begin_src emacs-lisp :tangle ./config.el
(map! :leader
      (:prefix ("v" . "Ivy")
       :desc "Ivy push view" "v p" #'ivy-push-view
       :desc "Ivy switch view" "v s" #'ivy-switch-view))
#+end_src

* Magit
#+begin_src emacs-lisp :tangle ./config.el
(map! :leader
      (:prefix ("R" . "Revert")
       :desc "Revert file" "R f" #'magit-revert))

(map! :leader
      (:prefix ("r" . "Remote")
       :desc "Add remote" "r a" #'magit-remote-add))
#+end_src

* Org mode
#+begin_src emacs-lisp :tangle ./config.el

(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.config/.dotfiles/config/emacs/doom/config.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))


(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)

(setq org-directory "~/.local/org/"
      org-agenda-files '("~/.local/org/agenda.org")
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-agenda-start-with-log-mode t
      org-log-done 'time
      org-log-into-drawer t
      org-ellipsis " ▼ ")

(use-package! org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "●" "○" "◆" "●" "○" "◆")))

(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
(font-lock-add-keywords 'org-journal-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

(set-face-attribute 'variable-pitch nil :font "Cantarell")
#+end_src

** Fontsizes for header levels in Org
#+begin_src emacs-lisp :tangle ./config.el
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0)))))
#+end_src

** Org-journal
#+begin_src emacs-lisp :tangle ./config.el
(setq org-journal-dir "~/.local/org/journal/"
      org-journal-date-prefix "* "
      org-journal-time-prefix "** "
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org")
#+end_src

* Python
#+begin_src emacs-lisp :tangle ./config.el
(use-package! lsp-pyright
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp))))
#+end_src

* Which-key
#+begin_src emacs-lisp :tangle ./config.el
(setq which-key-idle-delay 0.5)
#+end_src

* Packages
#+begin_src emacs-lisp :tangle ./packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)


(package! kaolin-themes)
(package! modus-themes)

(package! peep-dired)
(package! dired-icon)
(package! all-the-icons-dired)
(package! dired-open)

(package! page-break-lines)
(package! dashboard)

(package! smart-tabs-mode)
(package! nix-mode)
(package! haskell-mode)

(package! lsp-haskell)
(package! lsp-pyright)

(package! exwm)
(package! dmenu)
(package! helm-exwm)
(package! windower)

(package! org-bullets)
(package! org-journal)
#+end_src
